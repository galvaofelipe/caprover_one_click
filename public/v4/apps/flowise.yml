# You are a DevOps Engineer with expertise in Linux, Docker, and CapRover, specializing in deploying web applications.
# Your mission is to create and refine One Click App definitions for AI-related applications in the CapRover One Click App public repository.
# To aid you in this task, you will be provided with a One Click App definition, relevant context, and specific goals to accomplish.
#
# ## Task
# Your objective is to prepare the One Click App definition for the FlowiseAI application, ensuring it meets the standards for publishing on the public Apps repository. To achieve this, please:
# 1. Evaluate and suggest improvements to the `displayName`, `isOfficial`, and `description` fields in the `caproverOneClickApp` section to accurately represent the FlowiseAI application.
# 2. Carefully examine the Environment Variables defined in the `$$cap_appname.environment` section. Ensure they are correctly configured to allow users to customize the FlowiseAI application according to their needs. Do we need to add/remove any variables? Which ones are essential?
# 3. Assess the `caproverOneClickApp.variables` section to guarantee that all essential options are present, with suitable default values and clear descriptions to guide users. Consider the previous task while making these evaluations.
# 4. Propose any additional modifications or enhancements to the One Click App definition that you believe would improve its usability, reliability, or functionality.
#
# ## Context
# To assist you in this task, the following resources and examples are provided:
#
# 1. FlowiseAI Documentation
# **ðŸ¤” What is Flowise?**
# - Flowise is an open source low-code tool for developers to build customized LLM orchestration flow & AI agents.
# 
# 1.1 Docker Deployment Instructions
# Go to docker folder at the root of the project
# Copy the .env.example file and paste it as another file named .env
# Bring up the docker containers using the following command
# ```
# docker-compose up -d
# ```
# Open http://localhost:3000 to access the Flowise web application
#
#
# 1.2 Example docker-compose.yml file
# ```yaml
# # docker-compose.yml
# version: '3.1'
#
# services:
#     flowise:
#         image: flowiseai/flowise
#         restart: always
#         environment:
#             - PORT=${PORT}
#             - CORS_ORIGINS=${CORS_ORIGINS}
#             - IFRAME_ORIGINS=${IFRAME_ORIGINS}
#             - FLOWISE_USERNAME=${FLOWISE_USERNAME}
#             - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
#             - FLOWISE_FILE_SIZE_LIMIT=${FLOWISE_FILE_SIZE_LIMIT}
#             - DEBUG=${DEBUG}
#             - DATABASE_PATH=${DATABASE_PATH}
#             - DATABASE_TYPE=${DATABASE_TYPE}
#             - DATABASE_PORT=${DATABASE_PORT}
#             - DATABASE_HOST=${DATABASE_HOST}
#             - DATABASE_NAME=${DATABASE_NAME}
#             - DATABASE_USER=${DATABASE_USER}
#             - DATABASE_PASSWORD=${DATABASE_PASSWORD}
#             - DATABASE_SSL=${DATABASE_SSL}
#             - DATABASE_SSL_KEY_BASE64=${DATABASE_SSL_KEY_BASE64}
#             - APIKEY_PATH=${APIKEY_PATH}
#             - SECRETKEY_PATH=${SECRETKEY_PATH}
#             - FLOWISE_SECRETKEY_OVERWRITE=${FLOWISE_SECRETKEY_OVERWRITE}
#             - LOG_LEVEL=${LOG_LEVEL}
#             - LOG_PATH=${LOG_PATH}
#             - BLOB_STORAGE_PATH=${BLOB_STORAGE_PATH}
#             - DISABLE_FLOWISE_TELEMETRY=${DISABLE_FLOWISE_TELEMETRY}
#             - MODEL_LIST_CONFIG_JSON=${MODEL_LIST_CONFIG_JSON}
#         ports:
#             - '${PORT}:${PORT}'
#         volumes:
#             - ~/.flowise:/root/.flowise
#         command: /bin/sh -c "sleep 3; flowise start"
# ```
#
#
# 1.3 Example .env file
# ```text
# # .env.example content
# PORT=3000
# DATABASE_PATH=/root/.flowise
# APIKEY_PATH=/root/.flowise
# SECRETKEY_PATH=/root/.flowise
# LOG_PATH=/root/.flowise/logs
# BLOB_STORAGE_PATH=/root/.flowise/storage
# NUMBER_OF_PROXIES= 1
# CORS_ORIGINS="*"
# IFRAME_ORIGINS="*"
# DATABASE_TYPE=postgres
# DATABASE_PORT=5432
# DATABASE_HOST=""
# DATABASE_NAME=flowise
# DATABASE_USER=root
# DATABASE_PASSWORD=mypassword
# DATABASE_SSL=true
# DATABASE_SSL_KEY_BASE64=<Self signed certificate in BASE64>
# FLOWISE_USERNAME=user
# FLOWISE_PASSWORD=1234
# FLOWISE_SECRETKEY_OVERWRITE=myencryptionkey
# FLOWISE_FILE_SIZE_LIMIT=50mb
# DEBUG=true
# LOG_LEVEL=debug (error | warn | info | verbose | debug)
# TOOL_FUNCTION_BUILTIN_DEP=crypto,fs
# TOOL_FUNCTION_EXTERNAL_DEP=moment,lodash
# LANGCHAIN_TRACING_V2=true
# LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
# LANGCHAIN_API_KEY=your_api_key
# LANGCHAIN_PROJECT=your_project
# DISABLE_FLOWISE_TELEMETRY=true
# Uncomment the following line to enable model list config, load the list of models from your local config file
# see https://raw.githubusercontent.com/FlowiseAI/Flowise/main/packages/components/models.json for the format
# MODEL_LIST_CONFIG_JSON=/your_model_list_config_file_path
# STORAGE_TYPE=local (local | s3)
# BLOB_STORAGE_PATH=/your_storage_path/.flowise/storage
# S3_STORAGE_BUCKET_NAME=flowise
# S3_STORAGE_ACCESS_KEY_ID=<your-access-key>
# S3_STORAGE_SECRET_ACCESS_KEY=<your-secret-key>
# S3_STORAGE_REGION=us-west-2
# ```
#
#
# 1.4 Example Dockerfile
# ```yaml
# # flowiseai/flowise Dockerfile
# FROM node:18-alpine
#
# USER root
#
# RUN apk add --no-cache git
# RUN apk add --no-cache python3 py3-pip make g++
# # needed for pdfjs-dist
# RUN apk add --no-cache build-base cairo-dev pango-dev
#
# # Install Chromium
# RUN apk add --no-cache chromium
#
# ENV PUPPETEER_SKIP_DOWNLOAD=true
# ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
#
# # You can install a specific version like: flowise@1.0.0
# RUN npm install -g flowise
#
# WORKDIR /data
#
# CMD "flowise"
# ```
#
#
# 1.5 Environment Variables Reference
# Flowise support different environment variables to configure your instance. You can specify the following variables in the `.env` file inside `packages/server` folder. Refer to .env.example file.
#
# | Variable | Description | Type | Default |
# | --- | --- | --- | --- |
# | PORT | The HTTP port Flowise runs on | Number | 3000 |
# | FLOWISE_USERNAME | Username to login | String | |
# | FLOWISE_PASSWORD | Password to login | String | |
# | DEBUG | Print logs onto terminal/console | Boolean | |
# | BLOB_STORAGE_PATH | Location where uploaded files are stored | String | `your-home-dir/.flowise/storage` |
# | APIKEY_PATH | Location where API keys are saved | String | `Flowise/packages/server` |
# | SECRETKEY_PATH | Location where encryption key (used to encrypt/decrypt credentials) is saved| String | `Flowise/packages/server` |
# | FLOWISE_SECRETKEY_OVERWRITE | Encryption key to be used instead of the key stored in SECRETKEY_PATH | String | |
# | LOG_PATH | Location where log files are stored | String | `Flowise/packages/server/logs` |
# | LOG_LEVEL | Different log levels for loggers to be saved | Enum String: `info`, `verbose`, `debug`| `info` |
# | TOOL_FUNCTION_BUILTIN_DEP | NodeJS built-in modules to be used for Tool Function | String |  |
# | TOOL_FUNCTION_EXTERNAL_DEP | External modules to be used for Tool Function | String |  |
# | NUMBER_OF_PROXIES | Rate Limit Proxy | Number |  |
# | CORS_ORIGINS | The allowed origins for all cross-origin HTTP calls | String |  |
# | IFRAME_ORIGINS | The allowed origins for iframe src embedding | String |  |
# | MODEL_LIST_CONFIG_JSON | Link to load list of models from your `models.json` config file | String | https://raw.githubusercontent.com/FlowiseAI/Flowise/main/packages/components/models.json |
#
# 1.5.1 Database
# | Variable | Description | Type | Default |
# | --- | --- | --- | --- |
# | DATABASE_TYPE | Type of database to store the flowise data    | Enum String: `sqlite`, `mysql`, `postgres`    | `sqlite`    |
# | DATABASE_PATH | Location where database is saved (When DATABASE_TYPE is sqlite) | String    | `your-home-dir/.flowise`    |
# | DATABASE_HOST | Host URL or IP address (When DATABASE_TYPE is not sqlite) | String    |  |
# | DATABASE_PORT | Database port (When DATABASE_TYPE is not sqlite) | String    |  |
# | DATABASE_USER | Database username (When DATABASE_TYPE is not sqlite) | String    |  |
# | DATABASE_PASSWORD | Database password (When DATABASE_TYPE is not sqlite) | String    |  |
# | DATABASE_NAME | Database name (When DATABASE_TYPE is not sqlite) | String    |  |
#
# 1.5.2 LangSmith Tracing
# Flowise supports LangSmith tracing with the following env variables:
# | Variable | Description | Type |
# | --- | --- | --- |
# | LANGCHAIN_TRACING_V2 | Turn LangSmith tracing ON or OFF | Enum String: `true`, `false` |
# | LANGCHAIN_ENDPOINT | LangSmith endpoint  | String  |
# | LANGCHAIN_API_KEY | LangSmith API Key | String |
# | LANGCHAIN_PROJECT | Project to trace on LangSmith  | String  |
#
# 1.5.3 Built-In and External Dependencies
# For security reasons, by default Tool Function only allow certain dependencies. It's possible to lift that restriction for built-in and external modules by setting the following environment variables:
# | Variable | Description | Type |
# | --- | --- | --- |
# | TOOL_FUNCTION_BUILTIN_DEP | NodeJS built-in modules to be used for Tool Function | String |
# | TOOL_FUNCTION_EXTERNAL_DEP | External modules to be used for Tool Function | String |
#
# 1.5.4 Debug and Logs
# | Variable | Description | Type | Default |
# | --- | --- | --- | --- |
# | DEBUG | Print logs from components | Boolean | |
# | LOG_PATH | Location where log files are stored | String | `Flowise/packages/server/logs` |
# | LOG_LEVEL | Different levels of logs | Enum String: `error`, `info`, `verbose`, `debug` | `info` |
#
# 1.5.5 Credentials and API Keys
# Flowise store your third party API keys as encrypted credentials using an encryption key.
# By default, a random encryption key will be generated when starting up the application and stored under a file path. This encryption key is then retrieved everytime to decrypt the credentials used within a chatflow. For example, your OpenAI API key, Pinecone API key, etc.
# | Variable | Description | Type | Default |
# | --- | --- | --- | --- |
# | SECRETKEY_PATH | Location where encryption key (used to encrypt/decrypt credentials) is saved | String | `Flowise/packages/server` |
# | FLOWISE_SECRETKEY_OVERWRITE | Encryption key to be used instead of the key stored in SECRETKEY_PATH | String |  |
#
# For some reasons, sometimes encryption key might be re-generated or the stored path was changed, this will cause errors like - Credentials could not be decrypted.
# To avoid this, you can set your own encryption key as `FLOWISE_SECRETKEY_OVERWRITE`, so that the same encryption key will be used everytime. There is no restriction on the format, you can set it as any text that you want, or the same as your `FLOWISE_PASSWORD`.
# Credential API Key returned from the UI is not the same length as your original Api Key that you have set. This is a fake prefix string that prevents network spoofing, that's why we are not returning the Api Key back to UI. However, the correct Api Key will be retrieved and used during your interaction with the chatflow.
#
# 1.5.6 Models
# In some cases, you might want to use custom model on the existing Chat Model and LLM nodes, or restrict access to only certain models.
# By default, Flowise pulls the model list from https://raw.githubusercontent.com/FlowiseAI/Flowise/main/packages/components/models.json. However user can create their own `models.json` file and specify the file path:
# | Variable | Description | Type | Default |
# | --- | --- | --- | --- |
# | MODEL_LIST_CONFIG_JSON | Link to load list of models from your `models.json` config file | String | [https://raw.githubusercontent.com/FlowiseAI/Flowise/main/packages/components/models.json][11] |
#
# **How to set environment variables**
# - Docker
#   You can set all these variables in the `.env` file inside `docker` folder. Refer to [.env.example][15] file.
#
# 1.6 Database Configuration
# Flowise supports 3 database types:
# - SQLite
# - MySQL
# - PostgreSQL
# SQLite will be the default database. These databases can be configured with following env variables:
#
# SQLite
# ```
# DATABASE_TYPE=sqlite
# DATABASE_PATH=/root/.flowise #your preferred location
# ```
# A database.sqlite file will be created and saved in the path specified by DATABASE_PATH. If not specified, the default store path will be in your home directory -> .flowise
#
# MySQL
# ```
# DATABASE_TYPE=mysql
# DATABASE_PORT=3306
# DATABASE_HOST=localhost
# DATABASE_NAME=flowise
# DATABASE_USER=user
# DATABASE_PASSWORD=123
# ```
#
# PostgreSQL
# ```
# DATABASE_TYPE=postgres
# DATABASE_PORT=5432
# DATABASE_HOST=localhost
# DATABASE_NAME=flowise
# DATABASE_USER=user
# DATABASE_PASSWORD=123
# ```
# If none of the env variables is specified, SQLite will be the fallback database choice.
#
# Synchronize in Production
# Flowise uses Typeorm to configure database connection. By default, synchronize is set to true. This indicates if database schema should be auto created on every application launch.
# However, we have to be careful with this option and don't use this in production - otherwise you can lose production data. This option is useful during debug and development.
# To override the value, set the following env variable
# OVERRIDE_DATABASE=false
#
# 1.7 Rate Limit Configuration
# When you share your chatflow to public with no API authorization through API or embedded chat, anybody can access the flow. To prevent spamming, you can set the rate limit on your chatflow.
# - Message Limit per Duration: How many messages can be received in a specific duration. Ex: 20
# - Duration in Seconds: The specified duration. Ex: 60
# - Limit Message: What message to return when the limit is exceeded. Ex: Quota Exceeded
# Using the example above, that means only 20 messages are allowed to be received in 60 seconds. The rate limitation is tracked by IP-address. If you have deployed Flowise on cloud service, you'll have to set NUMBER_OF_PROXIES env variable.
#
# ## Current One Click App Definition
# ~~~
captainVersion: 4
services:
    $$cap_appname:
        image: flowiseai/flowise
        command: /bin/sh -c "sleep 3; flowise start"
        restart: unless-stopped
        environment:
            PORT: 3000
            CORS_ORIGINS: $$cap_cors_origins
            IFRAME_ORIGINS: $$cap_iframe_origins
            FLOWISE_USERNAME: $$cap_username
            FLOWISE_PASSWORD: $$cap_password
            FLOWISE_FILE_SIZE_LIMIT: $$cap_file_size_limit
            DEBUG: $$cap_debug
            DATABASE_TYPE: postgres
            DATABASE_PORT: 5432
            DATABASE_HOST: srv-captain--$$cap_appname-db
            DATABASE_NAME: flowise
            DATABASE_USER: flowise
            DATABASE_PASSWORD: $$cap_db_password
            OVERRIDE_DATABASE: $$cap_sync_db_on_restart
            LOG_LEVEL: $$cap_log_level
            LOG_PATH: /root/.flowise/logs
            APIKEY_PATH: /root/.flowise/api_key
            SECRETKEY_PATH: /root/.flowise/secret_key
            FLOWISE_SECRETKEY_OVERWRITE: $$cap_secretkey_overwrite
            STORAGE_TYPE: $$cap_storage_type
            BLOB_STORAGE_PATH: /root/.flowise/storage
            S3_STORAGE_BUCKET_NAME: $$cap_s3_bucket_name
            S3_STORAGE_ACCESS_KEY_ID: $$cap_s3_access_key_id
            S3_STORAGE_SECRET_ACCESS_KEY: $$cap_s3_secret_access_key
            S3_STORAGE_REGION: $$cap_s3_region
            DISABLE_FLOWISE_TELEMETRY: $$cap_disable_telemetry
            MODEL_LIST_CONFIG_JSON: $$cap_model_list_config_json
            TOOL_FUNCTION_BUILTIN_DEP: $$cap_tool_function_builtin_dep
            TOOL_FUNCTION_EXTERNAL_DEP: $$cap_tool_function_external_dep
            LANGCHAIN_TRACING_V2: $$cap_langchain_tracing_v2
            LANGCHAIN_ENDPOINT: $$cap_langchain_endpoint
            LANGCHAIN_API_KEY: $$cap_langchain_api_key
            LANGCHAIN_PROJECT: $$cap_langchain_project
        volumes:
            - $$cap_appname-db:/root/.flowise
        caproverExtra:
            containerHttpPort: 3000
        depends_on:
            - $$cap_appname-db
    $$cap_appname-db:
        image: 'postgres:$$cap_postgres_version'
        restart: unless-stopped
        environment:
            POSTGRES_DB: flowise
            POSTGRES_PASSWORD: $$cap_db_password
            POSTGRES_USER: flowise
            POSTGRES_INITDB_ARGS: "--encoding='UTF8' --lc-collate='C' --lc-ctype='C'"
        volumes:
            - '$$cap_appname-db:/var/lib/postgresql/data'
        caproverExtra:
            notExposeAsWebApp: true
caproverOneClickApp:
    variables:
        - id: $$cap_postgres_version
          label: PostgreSQL Version
          defaultValue: '15.6'
          description: The version of PostgreSQL to use.
          type: text
        - id: $$cap_db_password
          label: Database Password
          defaultValue: $$cap_gen_random_hex(20)
          description: The password for the database user.
          type: text
        - id: $$cap_cors_origins
          label: Allowed Origins for CORS
          defaultValue: '*'
          description: The allowed origins for all cross-origin HTTP calls.
          type: text
        - id: $$cap_iframe_origins
          label: Allowed Origins for Iframe Embedding
          defaultValue: '*'
          description: The allowed origins for iframe src embedding.
          type: text
        - id: $$cap_username
          label: Flowise Username
          defaultValue: admin
          description: The username to login to Flowise.
          type: text
        - id: $$cap_password
          label: Flowise Password
          defaultValue: $$cap_gen_random_hex(20)
          description: The password to login to Flowise.
          type: text
        - id: $$cap_file_size_limit
          label: Upload File Size Limit
          defaultValue: 50mb
          description: The maximum file size allowed for uploads.
          type: text
        - id: $$cap_debug
          label: Debug Mode
          defaultValue: false
          description: Print logs from components.
          type: text
        - id: $$cap_sync_db_on_restart
          label: Sync Database on Restart
          defaultValue: false
          description: Set to true to re-create schema on every restart.
          type: text
        - id: $$cap_secretkey_overwrite
          label: Encryption Key Overwrite
          defaultValue: null
          description: Encryption key to be used instead of the key stored in SECRETKEY_PATH.
          type: text
        - id: $$cap_log_level
          label: Log Level
          defaultValue: info
          description: Different levels of logs.
          type: enum
          enumValues:
              - error
              - info
              - verbose
              - debug
        - id: $$cap_storage_type
          label: Storage Type
          defaultValue: local
          description: Type of storage for uploaded files. Default is local.
          type: enum
          enumValues:
              - s3
              - local
        - id: $$cap_s3_bucket_name
          label: S3 Bucket Name
          defaultValue: null
          description: Bucket name to hold the uploaded files when STORAGE_TYPE is s3.
          type: text
        - id: $$cap_s3_access_key_id
          label: S3 Access Key ID
          defaultValue: null
          description: AWS Access Key.
          type: text
        - id: $$cap_s3_secret_access_key
          label: S3 Secret Access Key
          defaultValue: null
          description: AWS Secret Key.
          type: text
        - id: $$cap_s3_region
          label: S3 Region
          defaultValue: null
          description: Region for S3 bucket.
          type: text
        - id: $$cap_disable_telemetry
          label: Disable Telemetry
          defaultValue: false
          description: Turn off telemetry.
          type: text
        - id: $$cap_model_list_config_json
          label: Model List Config JSON
          defaultValue: /your_model_list_config_file_path
          description: File path to load list of models from your local config file.
          type: text
        - id: $$cap_tool_function_builtin_dep
          label: Tool Function Built-in Dependencies
          defaultValue: null
          description: NodeJS built-in modules to be used for Tool Function.
          type: text
          example: fs, path
        - id: $$cap_tool_function_external_dep
          label: Tool Function External Dependencies
          defaultValue: null
          description: External modules to be used for Tool Function.
          type: text
          example: axios, lodash
        - id: $$cap_langchain_tracing_v2
          label: LangSmith Tracing
          defaultValue: false
          description: Turn LangSmith tracing ON or OFF.
          type: text
        - id: $$cap_langchain_endpoint
          label: LangSmith Endpoint
          defaultValue: null
          description: LangSmith endpoint.
          type: text
        - id: $$cap_langchain_api_key
          label: LangSmith API Key
          defaultValue: null
          description: LangSmith API Key.
          type: text
        - id: $$cap_langchain_project
          label: LangSmith Project
          defaultValue: null
          description: Project to trace on LangSmith.
          type: text
    instructions:
        start: |-
            Flowise is an open source low-code tool for developers to build customized LLM orchestration flow & AI agents. 
            Checkout https://github.com/FlowiseAI/Flowise/blob/main/CONTRIBUTING.md and https://docs.flowiseai.com/configuration/environment-variables to learn how to configure the environment variables.
        end: |-
            1. Access your app at https://$$cap_appname.$$cap_root_domain/
            2. Login with the following credentials:
                - Username: $$cap_username
                - Password: $$cap_password

            ## Postgres Database
            - Database Name: flowise
            - Database User: flowise
            - Database Password: $$cap_db_password
            - Database Host: srv-captain--$$cap_appname-db
            - Database Port: 5432
    displayName: Flowise AI - LLM Orchestration Tool
    isOfficial: true
    description: >-
        Flowise is an open-source low-code platform for developers to build, deploy, and share customized LLM orchestration flows and AI agents. With an intuitive drag-and-drop interface and support for various LLM providers, Flowise empowers developers to create powerful AI solutions quickly and easily.
    documentation: >-
        Taken from https://docs.flowiseai.com | Official Website is https://flowiseai.com
#
# ~~~
#
# Let's break down the problem step by step to ensure a smooth and successful deployment on CapRover.
#
# To achieve the best results, we'll follow a systematic approach:
#
# 1. Carefully analyze the provided One Click App definition to identify areas for improvement and optimization.
# 2. Evaluate the environment variables to ensure they are properly defined, documented, and aligned with the application's requirements.
# 3. Assess the user-configurable options to guarantee a balanced mix of flexibility and ease of use.
# 4. Propose any additional enhancements that could further elevate the app's usability, reliability, and overall functionality.
#
# By adopting this methodical approach, we can deliver a top-notch solution that meets the highest standards of quality and performance.
#
# Your expertise and keen eye for detail will be invaluable in refining this One Click App definition. Let's collaborate closely to create an exceptional result that showcases the full potential of the application on the CapRover platform.
#
# Together, we can make a meaningful difference by delivering a well-crafted and user-friendly solution. Let's bring our best efforts to this endeavor and create something truly remarkable.